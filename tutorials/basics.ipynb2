{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tensors\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import numpy as np\n",
    "from torch.utils.data import Dataset,DataLoader\n",
    "from torchvision import datasets\n",
    "from torchvision.transforms import ToTensor\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tensors\n",
    "Come pythpm ,a anche su gpu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "arr=np.arange(0,16).reshape((4,4))\n",
    "x_data=torch.tensor(arr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[ 0,  1,  2,  3],\n",
       "        [ 4,  5,  6,  7],\n",
       "        [ 8,  9, 10, 11],\n",
       "        [12, 13, 14, 15]])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tensor([[0.9939, 0.2620, 0.6103, 0.1144],\n",
       "        [0.3531, 0.1822, 0.5607, 0.1517],\n",
       "        [0.7004, 0.7008, 0.8407, 0.2051],\n",
       "        [0.3283, 0.8321, 0.6580, 0.7034]])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "torch.rand((4, 4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "device(type='cpu')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_data.device"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Alcuni parameri che possiamo usare quando creiamo un tensore sono dtype, device e requires_grad\n",
    "  - requires_grad Ã¨ un flag che ci permette di tenere traccia del gradiente ogni volta che delle operazioni che vengono fatte sul tensore"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "tensor_grad=torch.tensor([0,1,2],device=\"cpu\",requires_grad=True,dtype=torch.float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AccumulateGrad at 0x7f19b858d990>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(tensor_grad*tensor_grad*2).grad_fn.next_functions[0][0].next_functions[0][0]"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Workflow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#1 Data\n",
    "x=torch.arange(100).unsqueeze(dim=1) # unsqueeze adds a dimension\n",
    "y=2+3*x+torch.randn(100,1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Divide into train and test\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('weight', tensor([0.5488])), ('bias', tensor([-0.7104]))])"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class LinearRegression(torch.nn.Module):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.weight=torch.nn.Parameter(torch.randn(1))\n",
    "        self.bias=torch.nn.Parameter(torch.randn(1))\n",
    "    def forward(self,x):\n",
    "        return self.weight*x+self.bias\n",
    "    \n",
    "model=LinearRegression()\n",
    "model.state_dict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Prediction with random weights. \n",
    "with torch.inference_mode():\n",
    "    plt.plot(x_train,model(x_train))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "epochs=1000\n",
    "loss_fn=torch.nn.L1Loss()\n",
    "test_loss=[]\n",
    "train_loss=[]\n",
    "optimizer=torch.optim.SGD(model.parameters(),lr=1e-4)\n",
    "for epoch in range(epochs):\n",
    "    model.train() #Set model to training mode\n",
    "    y_pred=model(x_train)\n",
    "    loss=loss_fn(y_pred,y_train)\n",
    "    train_loss.append(loss.detach().numpy())\n",
    "    optimizer.zero_grad()\n",
    "    loss.backward()\n",
    "    optimizer.step()\n",
    "    \n",
    "    model.eval() #Set model to evaluation mode\n",
    "    with torch.inference_mode():\n",
    "        test_pred=model(x_test)\n",
    "        test_loss.append(loss_fn(test_pred,y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.eval() #REMEMBER TO SET MODEL TO EVALUATION MODE and inference_mode\n",
    "with torch.inference_mode():\n",
    "    plt.plot(test_loss)\n",
    "    plt.plot(train_loss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OrderedDict([('weight', tensor([3.0395])), ('bias', tensor([-0.6413]))])"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.state_dict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.eval()  # REMEMBER TO SET MODEL TO EVALUATION MODE and inference_mode\n",
    "with torch.inference_mode():\n",
    "    plt.plot(x_test,model(x_test)) #detach() is used to remove the gradient information\n",
    "    plt.plot(x_test,y_test,\".\")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Neural network classification\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "import pandas as pd\n",
    "from sklearn.datasets import make_circles\n",
    "\n",
    "\n",
    "# Make 1000 samples\n",
    "n_samples = 1000\n",
    "\n",
    "# Create circles\n",
    "X, y = make_circles(n_samples,\n",
    "                    noise=0.03,  # a little bit of noise to the dots\n",
    "                    random_state=42)  # keep random state so we get the same values\n",
    "circles = pd.DataFrame({\"X1\": X[:, 0],\n",
    "                        \"X2\": X[:, 1],\n",
    "                        \"label\": y\n",
    "                        })\n",
    "circles.head(10)\n",
    "plt.scatter(x=X[:, 0],\n",
    "            y=X[:, 1],\n",
    "            c=y,\n",
    "            cmap=plt.cm.RdYlBu)\n",
    "\n",
    "X = torch.from_numpy(X).type(torch.float)\n",
    "y = torch.from_numpy(y).type(torch.float)\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,\n",
    "                                                    y,\n",
    "                                                    test_size=0.2,  # 20% test, 80% train\n",
    "                                                    random_state=42)  # make the random split reproducible\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [],
   "source": [
    "class NN(torch.nn.Module):\n",
    "    def __init__(self,x_train=None,y_train=None,x_test=None,y_test=None):\n",
    "        super().__init__()\n",
    "        self.x_train=x_train\n",
    "        self.y_train=y_train\n",
    "        self.x_test=x_test\n",
    "        self.y_test=y_test\n",
    "        self.layer_1=torch.nn.Linear(in_features=x_train.shape[1],out_features=4)\n",
    "        self.layer_1_fn=torch.nn.Sigmoid()\n",
    "        self.layer_2 = torch.nn.Linear(in_features=4, out_features=1)\n",
    "        self.layer_2_fn = torch.nn.Sigmoid()\n",
    "        \n",
    "        self.optimizer = torch.optim.SGD(params=self.parameters(),lr=0.1)\n",
    "        self.loss_fn=torch.nn.BCELoss()\n",
    "        \n",
    "        self.train_loss=[]\n",
    "        self.test_loss=[]\n",
    "        \n",
    "        self.accuracy_fn = lambda y_pred, y_true: (y_pred.round() == y_true).sum()/len(y_true)\n",
    "        self.train_accuracy=[]\n",
    "        self.test_accuracy=[]\n",
    "\n",
    "    def forward(self,x):\n",
    "        x1=self.layer_1(x)\n",
    "        x2=self.layer_1_fn(x1)\n",
    "        x3=self.layer_2(x2)\n",
    "        x4=self.layer_2_fn(x3)\n",
    "        return x4\n",
    "    \n",
    "    def train_loop(self,epochs=None):\n",
    "        for epoch in range(epochs):\n",
    "            self.train()\n",
    "            \n",
    "            y_logits=self(self.x_train).squeeze()\n",
    "            y_pred=y_logits.round()\n",
    "            print(f\"logits: {y_logits}\")\n",
    "            train_loss_step=self.loss_fn(y_logits,self.y_train)\n",
    "\n",
    "            train_accuracy_step=self.accuracy_fn(y_pred,self.y_train)\n",
    "            self.optimizer.zero_grad()\n",
    "            loss.backward(retain_graph=True)\n",
    "            optimizer.step()\n",
    "            \n",
    "            self.eval()\n",
    "            with torch.inference_mode():\n",
    "                test_logits=self(self.x_test).squeeze()\n",
    "                test_pred=test_logits.round()\n",
    "                test_loss_step=self.loss_fn(test_logits,self.y_test)\n",
    "                test_accuracy_step=self.accuracy_fn(test_pred,self.y_test)\n",
    "                self.test_loss.append(test_loss_step)\n",
    "                self.train_loss.append(train_loss_step)\n",
    "                self.test_accuracy.append(test_accuracy_step)\n",
    "                self.train_accuracy.append(train_accuracy_step)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [],
   "source": [
    "model=NN(x_train=X_train,y_train=y_train,x_test=X_test,y_test=y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "logits: tensor([0.5197, 0.5166, 0.5033, 0.5024, 0.5265, 0.5001, 0.5226, 0.5302, 0.5212,\n",
      "        0.5218, 0.5178, 0.5063, 0.5208, 0.5140, 0.5023, 0.4994, 0.5323, 0.5011,\n",
      "        0.5111, 0.5132, 0.5185, 0.5120, 0.5270, 0.5027, 0.5115, 0.5099, 0.5324,\n",
      "        0.5212, 0.5250, 0.5264, 0.5082, 0.5344, 0.5339, 0.5159, 0.5280, 0.5284,\n",
      "        0.5257, 0.5079, 0.5250, 0.5280, 0.5224, 0.5031, 0.4989, 0.5048, 0.4995,\n",
      "        0.5134, 0.4997, 0.5313, 0.4994, 0.5025, 0.5010, 0.5300, 0.5013, 0.5151,\n",
      "        0.5071, 0.5282, 0.5300, 0.5169, 0.5058, 0.5211, 0.5133, 0.5335, 0.5334,\n",
      "        0.5038, 0.5156, 0.5332, 0.5255, 0.5082, 0.5246, 0.5278, 0.5073, 0.5287,\n",
      "        0.5026, 0.5335, 0.5000, 0.5299, 0.4998, 0.5043, 0.5330, 0.5053, 0.5273,\n",
      "        0.5024, 0.4993, 0.5192, 0.5287, 0.5051, 0.5272, 0.5213, 0.5009, 0.5067,\n",
      "        0.5271, 0.5046, 0.5217, 0.5073, 0.5293, 0.5275, 0.4982, 0.5268, 0.5274,\n",
      "        0.5221, 0.5025, 0.5107, 0.5287, 0.5255, 0.5026, 0.5309, 0.5277, 0.5281,\n",
      "        0.5294, 0.4982, 0.5054, 0.5307, 0.5295, 0.5285, 0.5224, 0.5247, 0.5128,\n",
      "        0.5114, 0.5145, 0.5154, 0.4983, 0.5036, 0.5246, 0.5180, 0.5011, 0.5192,\n",
      "        0.5230, 0.5317, 0.5238, 0.5259, 0.5302, 0.5284, 0.5296, 0.5273, 0.5282,\n",
      "        0.5085, 0.5278, 0.5025, 0.5230, 0.5286, 0.5177, 0.5289, 0.5327, 0.5304,\n",
      "        0.5303, 0.5304, 0.5179, 0.5155, 0.5074, 0.5235, 0.5220, 0.5286, 0.5054,\n",
      "        0.5296, 0.5022, 0.5046, 0.5293, 0.5162, 0.5000, 0.5097, 0.5309, 0.5000,\n",
      "        0.5329, 0.5306, 0.5063, 0.5112, 0.5256, 0.5153, 0.5247, 0.5039, 0.4990,\n",
      "        0.5265, 0.5318, 0.5248, 0.5282, 0.5261, 0.5301, 0.5088, 0.5025, 0.5091,\n",
      "        0.5175, 0.5136, 0.5241, 0.5313, 0.5001, 0.5275, 0.5188, 0.5015, 0.5309,\n",
      "        0.5121, 0.5291, 0.5334, 0.5291, 0.5238, 0.5321, 0.5291, 0.5169, 0.5224,\n",
      "        0.5029, 0.5053, 0.5126, 0.5132, 0.5198, 0.5333, 0.5249, 0.5097, 0.5034,\n",
      "        0.5069, 0.5074, 0.5058, 0.5104, 0.5145, 0.5277, 0.5028, 0.5101, 0.5088,\n",
      "        0.5053, 0.5041, 0.5242, 0.5219, 0.5060, 0.5189, 0.5086, 0.5004, 0.5211,\n",
      "        0.5176, 0.5328, 0.5322, 0.5176, 0.5110, 0.5129, 0.5151, 0.4997, 0.5098,\n",
      "        0.5335, 0.5274, 0.5051, 0.5065, 0.5261, 0.5186, 0.5322, 0.5046, 0.5204,\n",
      "        0.5268, 0.5190, 0.5027, 0.5124, 0.5042, 0.5097, 0.5208, 0.5118, 0.5285,\n",
      "        0.5325, 0.5247, 0.5333, 0.5064, 0.5119, 0.5147, 0.5081, 0.5044, 0.4997,\n",
      "        0.5022, 0.5300, 0.5305, 0.5189, 0.5269, 0.5339, 0.5036, 0.5297, 0.5224,\n",
      "        0.5268, 0.5291, 0.5298, 0.4988, 0.5162, 0.5127, 0.5311, 0.5064, 0.5214,\n",
      "        0.5073, 0.4997, 0.5040, 0.5339, 0.5120, 0.5000, 0.5239, 0.4993, 0.5297,\n",
      "        0.5188, 0.5137, 0.5339, 0.5299, 0.5023, 0.5127, 0.5334, 0.5029, 0.5299,\n",
      "        0.5206, 0.5254, 0.5065, 0.5244, 0.5043, 0.5329, 0.5042, 0.5166, 0.5242,\n",
      "        0.5031, 0.5076, 0.5246, 0.5074, 0.5138, 0.5104, 0.4990, 0.5104, 0.5051,\n",
      "        0.5185, 0.5230, 0.5207, 0.5329, 0.5047, 0.4990, 0.5181, 0.4994, 0.5246,\n",
      "        0.5022, 0.5238, 0.5108, 0.5306, 0.5196, 0.5113, 0.5330, 0.5333, 0.5036,\n",
      "        0.5134, 0.5042, 0.5024, 0.5162, 0.5002, 0.5061, 0.5277, 0.5189, 0.5318,\n",
      "        0.5095, 0.4997, 0.5235, 0.5038, 0.4998, 0.5307, 0.5031, 0.5301, 0.5204,\n",
      "        0.5333, 0.5113, 0.5289, 0.5214, 0.5325, 0.5051, 0.5273, 0.5149, 0.5182,\n",
      "        0.5117, 0.5331, 0.5275, 0.5095, 0.5025, 0.5245, 0.5328, 0.5042, 0.5096,\n",
      "        0.4982, 0.4990, 0.5077, 0.5201, 0.5303, 0.5340, 0.5342, 0.5134, 0.5116,\n",
      "        0.5252, 0.5271, 0.5333, 0.4993, 0.5314, 0.5256, 0.5278, 0.4999, 0.5336,\n",
      "        0.5126, 0.5116, 0.5030, 0.5332, 0.5076, 0.5328, 0.5233, 0.5258, 0.5187,\n",
      "        0.5199, 0.4995, 0.5218, 0.5134, 0.5089, 0.5194, 0.4991, 0.4988, 0.5225,\n",
      "        0.5049, 0.5187, 0.5172, 0.5228, 0.5186, 0.5270, 0.5192, 0.5273, 0.5003,\n",
      "        0.5013, 0.5311, 0.5231, 0.5211, 0.5039, 0.5014, 0.5249, 0.5167, 0.5044,\n",
      "        0.5250, 0.5011, 0.5285, 0.5184, 0.5168, 0.5040, 0.5065, 0.5195, 0.5296,\n",
      "        0.4998, 0.5296, 0.5031, 0.5285, 0.5333, 0.5040, 0.5039, 0.5306, 0.5244,\n",
      "        0.5295, 0.5313, 0.5301, 0.5288, 0.5218, 0.5214, 0.5307, 0.5097, 0.5110,\n",
      "        0.5129, 0.5299, 0.5072, 0.5131, 0.5015, 0.5090, 0.5284, 0.5243, 0.5252,\n",
      "        0.5156, 0.5231, 0.5206, 0.5165, 0.5270, 0.5028, 0.5294, 0.5051, 0.5037,\n",
      "        0.5133, 0.5193, 0.5284, 0.5291, 0.5280, 0.5044, 0.5001, 0.5303, 0.5265,\n",
      "        0.5287, 0.5234, 0.5142, 0.5235, 0.5336, 0.5075, 0.5051, 0.5253, 0.5186,\n",
      "        0.5080, 0.5043, 0.5106, 0.5150, 0.5135, 0.5300, 0.5221, 0.5160, 0.5127,\n",
      "        0.5329, 0.5208, 0.5161, 0.5020, 0.5255, 0.5239, 0.5019, 0.5005, 0.5320,\n",
      "        0.5038, 0.5233, 0.5056, 0.5025, 0.5197, 0.5007, 0.5102, 0.5122, 0.5336,\n",
      "        0.5219, 0.5267, 0.5017, 0.5032, 0.5160, 0.5304, 0.5002, 0.5269, 0.5132,\n",
      "        0.5291, 0.5044, 0.5231, 0.5306, 0.5139, 0.5284, 0.5177, 0.5075, 0.5155,\n",
      "        0.5147, 0.5046, 0.5219, 0.5111, 0.5056, 0.5328, 0.5028, 0.5203, 0.5293,\n",
      "        0.5072, 0.5034, 0.5031, 0.5307, 0.5156, 0.5087, 0.5272, 0.5067, 0.5161,\n",
      "        0.5338, 0.5292, 0.5031, 0.5322, 0.5253, 0.5072, 0.5073, 0.5059, 0.5304,\n",
      "        0.5304, 0.5191, 0.5242, 0.5304, 0.5256, 0.5245, 0.5323, 0.5304, 0.5223,\n",
      "        0.5237, 0.5194, 0.5316, 0.5102, 0.5271, 0.5012, 0.5151, 0.5269, 0.5210,\n",
      "        0.5172, 0.4993, 0.5152, 0.5106, 0.5236, 0.5010, 0.5077, 0.5244, 0.5113,\n",
      "        0.5103, 0.5188, 0.5054, 0.5166, 0.5114, 0.5204, 0.5195, 0.4988, 0.5003,\n",
      "        0.5301, 0.5327, 0.5312, 0.5034, 0.5234, 0.5308, 0.5041, 0.5188, 0.5237,\n",
      "        0.5290, 0.5303, 0.5280, 0.5134, 0.5086, 0.5172, 0.5173, 0.5181, 0.5021,\n",
      "        0.5227, 0.5087, 0.5094, 0.5117, 0.5260, 0.5058, 0.5170, 0.5100, 0.5281,\n",
      "        0.5095, 0.5019, 0.5075, 0.5334, 0.5325, 0.5077, 0.5234, 0.5165, 0.5118,\n",
      "        0.5183, 0.5046, 0.5251, 0.5051, 0.5124, 0.5038, 0.5318, 0.5107, 0.5068,\n",
      "        0.5267, 0.5274, 0.5106, 0.5282, 0.5326, 0.5329, 0.5193, 0.5327, 0.5152,\n",
      "        0.5087, 0.5303, 0.5281, 0.5078, 0.5095, 0.5310, 0.5277, 0.5247, 0.5319,\n",
      "        0.5007, 0.5277, 0.4989, 0.5130, 0.5099, 0.5277, 0.5309, 0.5317, 0.5224,\n",
      "        0.5062, 0.5297, 0.5286, 0.5336, 0.5048, 0.5068, 0.5005, 0.5015, 0.5289,\n",
      "        0.5045, 0.5299, 0.5242, 0.5177, 0.4979, 0.4995, 0.5058, 0.5028, 0.5024,\n",
      "        0.5059, 0.5231, 0.5264, 0.5036, 0.5299, 0.5296, 0.5030, 0.5279, 0.4995,\n",
      "        0.5231, 0.5256, 0.5251, 0.5312, 0.5324, 0.5267, 0.5016, 0.5043, 0.5146,\n",
      "        0.5058, 0.5291, 0.5061, 0.5134, 0.5181, 0.5237, 0.5105, 0.5161, 0.5083,\n",
      "        0.5215, 0.5257, 0.5183, 0.5046, 0.5104, 0.5072, 0.5068, 0.5265, 0.5199,\n",
      "        0.5309, 0.5028, 0.5100, 0.5208, 0.5330, 0.5068, 0.5045, 0.5204, 0.5290,\n",
      "        0.5231, 0.5039, 0.5136, 0.5139, 0.5151, 0.5219, 0.5215, 0.5297, 0.5297,\n",
      "        0.5054, 0.4999, 0.5294, 0.5296, 0.5223, 0.5334, 0.5287, 0.5302, 0.5035,\n",
      "        0.5054, 0.5020, 0.5213, 0.5206, 0.5032, 0.5202, 0.5070, 0.5015, 0.5260,\n",
      "        0.5245, 0.5042, 0.5035, 0.5108, 0.5006, 0.5167, 0.5078, 0.5073, 0.5029,\n",
      "        0.5225, 0.5150, 0.5124, 0.5291, 0.5164, 0.5149, 0.5037, 0.5142, 0.5070,\n",
      "        0.5029, 0.5301, 0.5308, 0.5094, 0.5174, 0.5032, 0.5304, 0.5064, 0.5307,\n",
      "        0.5031, 0.5287, 0.5132, 0.5048, 0.5157, 0.5249, 0.5313, 0.5157, 0.5119,\n",
      "        0.5296, 0.5036, 0.5269, 0.5302, 0.5262, 0.5048, 0.5296, 0.5174],\n",
      "       grad_fn=<SqueezeBackward0>)\n"
     ]
    },
    {
     "ename": "RuntimeError",
     "evalue": "Trying to backward through the graph a second time (or directly access saved tensors after they have already been freed). Saved intermediate values of the graph are freed when you call .backward() or autograd.grad(). Specify retain_graph=True if you need to backward through the graph a second time or if you need to access saved tensors after calling backward.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[153], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m model\u001b[39m.\u001b[39;49mtrain_loop(epochs\u001b[39m=\u001b[39;49m\u001b[39m1000\u001b[39;49m)\n",
      "Cell \u001b[0;32mIn[151], line 41\u001b[0m, in \u001b[0;36mNN.train_loop\u001b[0;34m(self, epochs)\u001b[0m\n\u001b[1;32m     39\u001b[0m train_accuracy_step\u001b[39m=\u001b[39m\u001b[39mself\u001b[39m\u001b[39m.\u001b[39maccuracy_fn(y_pred,\u001b[39mself\u001b[39m\u001b[39m.\u001b[39my_train)\n\u001b[1;32m     40\u001b[0m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39moptimizer\u001b[39m.\u001b[39mzero_grad()\n\u001b[0;32m---> 41\u001b[0m loss\u001b[39m.\u001b[39;49mbackward(retain_graph\u001b[39m=\u001b[39;49m\u001b[39mTrue\u001b[39;49;00m)\n\u001b[1;32m     42\u001b[0m optimizer\u001b[39m.\u001b[39mstep()\n\u001b[1;32m     44\u001b[0m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39meval()\n",
      "File \u001b[0;32m/usr/lib/python3.10/site-packages/torch/_tensor.py:488\u001b[0m, in \u001b[0;36mTensor.backward\u001b[0;34m(self, gradient, retain_graph, create_graph, inputs)\u001b[0m\n\u001b[1;32m    478\u001b[0m \u001b[39mif\u001b[39;00m has_torch_function_unary(\u001b[39mself\u001b[39m):\n\u001b[1;32m    479\u001b[0m     \u001b[39mreturn\u001b[39;00m handle_torch_function(\n\u001b[1;32m    480\u001b[0m         Tensor\u001b[39m.\u001b[39mbackward,\n\u001b[1;32m    481\u001b[0m         (\u001b[39mself\u001b[39m,),\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    486\u001b[0m         inputs\u001b[39m=\u001b[39minputs,\n\u001b[1;32m    487\u001b[0m     )\n\u001b[0;32m--> 488\u001b[0m torch\u001b[39m.\u001b[39;49mautograd\u001b[39m.\u001b[39;49mbackward(\n\u001b[1;32m    489\u001b[0m     \u001b[39mself\u001b[39;49m, gradient, retain_graph, create_graph, inputs\u001b[39m=\u001b[39;49minputs\n\u001b[1;32m    490\u001b[0m )\n",
      "File \u001b[0;32m/usr/lib/python3.10/site-packages/torch/autograd/__init__.py:197\u001b[0m, in \u001b[0;36mbackward\u001b[0;34m(tensors, grad_tensors, retain_graph, create_graph, grad_variables, inputs)\u001b[0m\n\u001b[1;32m    192\u001b[0m     retain_graph \u001b[39m=\u001b[39m create_graph\n\u001b[1;32m    194\u001b[0m \u001b[39m# The reason we repeat same the comment below is that\u001b[39;00m\n\u001b[1;32m    195\u001b[0m \u001b[39m# some Python versions print out the first line of a multi-line function\u001b[39;00m\n\u001b[1;32m    196\u001b[0m \u001b[39m# calls in the traceback and some print out the last line\u001b[39;00m\n\u001b[0;32m--> 197\u001b[0m Variable\u001b[39m.\u001b[39;49m_execution_engine\u001b[39m.\u001b[39;49mrun_backward(  \u001b[39m# Calls into the C++ engine to run the backward pass\u001b[39;49;00m\n\u001b[1;32m    198\u001b[0m     tensors, grad_tensors_, retain_graph, create_graph, inputs,\n\u001b[1;32m    199\u001b[0m     allow_unreachable\u001b[39m=\u001b[39;49m\u001b[39mTrue\u001b[39;49;00m, accumulate_grad\u001b[39m=\u001b[39;49m\u001b[39mTrue\u001b[39;49;00m)\n",
      "\u001b[0;31mRuntimeError\u001b[0m: Trying to backward through the graph a second time (or directly access saved tensors after they have already been freed). Saved intermediate values of the graph are freed when you call .backward() or autograd.grad(). Specify retain_graph=True if you need to backward through the graph a second time or if you need to access saved tensors after calling backward."
     ]
    }
   ],
   "source": [
    "model.train_loop(epochs=1000)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dataloader"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "training_data = datasets.FashionMNIST(\n",
    "    root=\"data\",\n",
    "    train=True,\n",
    "    download=True,\n",
    "    transform=ToTensor()\n",
    ")\n",
    "\n",
    "test_data = datasets.FashionMNIST(\n",
    "    root=\"data\",\n",
    "    train=False,\n",
    "    download=True,\n",
    "    transform=ToTensor()\n",
    ")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Dataset FashionMNIST\n",
       "    Number of datapoints: 60000\n",
       "    Root location: data\n",
       "    Split: Train\n",
       "    StandardTransform\n",
       "Transform: ToTensor()"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "training_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([[[0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0863, 0.4627, 0.0941, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.1882, 0.3451, 0.0196, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0471, 0.3922, 0.8314, 0.8039, 0.7255, 0.7020, 0.6784, 0.7294,\n",
      "          0.7569, 0.8667, 0.5569, 0.3333, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.3333, 0.2980, 0.7804, 0.8824, 0.9725, 1.0000, 0.9333,\n",
      "          0.8863, 0.6157, 0.2667, 0.3137, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.3569, 0.2706, 0.3569, 0.7882, 0.8549, 0.8824, 0.8196,\n",
      "          0.6196, 0.2392, 0.3647, 0.2824, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.3098, 0.3490, 0.2392, 0.2314, 0.3412, 0.4235, 0.2941,\n",
      "          0.2196, 0.2980, 0.3804, 0.2863, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.2941, 0.3490, 0.3137, 0.3137, 0.2627, 0.2471, 0.2863,\n",
      "          0.3255, 0.3137, 0.3765, 0.2824, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.3020, 0.3451, 0.3020, 0.3137, 0.3255, 0.3255, 0.3255,\n",
      "          0.3255, 0.3176, 0.3725, 0.2980, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.3490, 0.3765, 0.3137, 0.3255, 0.3176, 0.3294, 0.3333,\n",
      "          0.3333, 0.3333, 0.3804, 0.3294, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.3647, 0.3804, 0.3176, 0.3333, 0.3294, 0.3333, 0.3412,\n",
      "          0.3451, 0.3294, 0.3882, 0.3412, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.3725, 0.3412, 0.3294, 0.3412, 0.3451, 0.3333, 0.3412,\n",
      "          0.3412, 0.3294, 0.3608, 0.3412, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.3804, 0.3412, 0.3412, 0.3333, 0.3451, 0.3412, 0.3412,\n",
      "          0.3412, 0.3451, 0.3333, 0.4196, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0667, 0.3922, 0.3451, 0.3412, 0.3412, 0.3451, 0.3412, 0.3412,\n",
      "          0.3333, 0.3490, 0.3020, 0.4627, 0.0314, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0392, 0.3647, 0.3412, 0.3412, 0.3412, 0.3412, 0.3412, 0.3451,\n",
      "          0.3412, 0.3490, 0.3137, 0.4039, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0353, 0.3765, 0.3412, 0.3412, 0.3412, 0.3412, 0.3412, 0.3451,\n",
      "          0.3412, 0.3451, 0.3412, 0.4039, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0471, 0.3765, 0.3333, 0.3412, 0.3412, 0.3412, 0.3333, 0.3412,\n",
      "          0.3412, 0.3451, 0.3490, 0.3922, 0.0078, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0784, 0.3725, 0.3294, 0.3451, 0.3333, 0.3412, 0.3451, 0.3451,\n",
      "          0.3451, 0.3490, 0.3451, 0.3882, 0.0314, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0824, 0.3765, 0.3333, 0.3412, 0.3333, 0.3451, 0.3451, 0.3451,\n",
      "          0.3451, 0.3490, 0.3490, 0.3882, 0.0392, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0941, 0.3765, 0.3333, 0.3412, 0.3333, 0.3412, 0.3451, 0.3451,\n",
      "          0.3490, 0.3451, 0.3569, 0.4000, 0.0549, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0980, 0.3647, 0.3294, 0.3451, 0.3412, 0.3412, 0.3412, 0.3412,\n",
      "          0.3412, 0.3490, 0.3569, 0.4039, 0.1137, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.1176, 0.3725, 0.3333, 0.3451, 0.3451, 0.3412, 0.3412, 0.3412,\n",
      "          0.3412, 0.3490, 0.3451, 0.4000, 0.1451, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.1333, 0.3765, 0.3451, 0.3412, 0.3412, 0.3412, 0.3412, 0.3412,\n",
      "          0.3412, 0.3333, 0.3333, 0.3804, 0.1490, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.1569, 0.3765, 0.3412, 0.3333, 0.3412, 0.3412, 0.3412, 0.3412,\n",
      "          0.3412, 0.3333, 0.3294, 0.3608, 0.1922, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.1804, 0.3725, 0.3255, 0.3294, 0.3412, 0.3412, 0.3412, 0.3412,\n",
      "          0.3412, 0.3412, 0.3294, 0.3412, 0.3294, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.2824, 0.3725, 0.3333, 0.3294, 0.3333, 0.3451, 0.3412, 0.3412,\n",
      "          0.3490, 0.3412, 0.3333, 0.3255, 0.2471, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.2510, 0.3922, 0.3294, 0.3412, 0.3451, 0.3333, 0.3451, 0.3451,\n",
      "          0.3294, 0.3412, 0.3255, 0.3725, 0.2078, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0392, 0.4000, 0.3922, 0.3569, 0.3569, 0.3490, 0.3333, 0.3294,\n",
      "          0.3294, 0.3412, 0.4235, 0.4157, 0.0549, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0314, 0.2863, 0.3647, 0.4078, 0.4196, 0.4039, 0.4039,\n",
      "          0.4157, 0.4000, 0.2941, 0.0392, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000],\n",
      "         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,\n",
      "          0.0039, 0.0000, 0.0000, 0.0000, 0.0706, 0.1647, 0.2235, 0.2196,\n",
      "          0.1255, 0.0314, 0.0000, 0.0000, 0.0039, 0.0000, 0.0000, 0.0000,\n",
      "          0.0000, 0.0000, 0.0000, 0.0000]]]) 0\n"
     ]
    }
   ],
   "source": [
    "data,label=training_data[2]\n",
    "print(f\"{data} {label}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "e7370f93d1d0cde622a1f8e1c04877d8463912d04d973331ad4851f04de6915a"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
